#!/usr/bin/env python
import numpy as np
from math import *
import sys
import os
import argparse

#==============================================================================================================
# this code only applies to non-psuedoknot sequence!!
#==============================================================================================================
parser = argparse.ArgumentParser(description='='*80+"\n  *** ct2dot_RNAstructure ***\n\n\t Convert the ct file generated by RNAstructure into 'dots' file\n"+'='*80, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-ct', type=str, help='The ct file generated by RNAstructure \n\n', metavar='')
parser.add_argument('--dots', type=str, help='The output file, suffix ".dots" is suggested\n\n', metavar='')
args = parser.parse_args()
#==============================================================================================================
fnCt = args.ct
fnDB = args.dots
if fnCt == None:
    print("Error: ct file should be specified")
    sys.exit(1)
if fnDB == None:
    print("Error: output dots file should be specified")
    sys.exit(1)
#------ out put the D&B into a file ------
#------ read the ct data ------------
fo = open(fnDB, 'w')
lines = open(fnCt).readlines()
nRes = int(lines[0].split()[0])
nCandidate = int(len(lines) / (nRes+1)) # how many candidates
print('{0:d} nt {1:d} candidates\n'.format(nRes, nCandidate))
DotBrk = []
DotBrk.append('>' + fnCt.replace('.ct','') + '  ' + str(nRes) + 'nt   ' + str(nCandidate) + ' candidates\n')
n = 0
seq = ''
for i in range(nRes):
    seq += lines[i+1].split()[1]
DotBrk.append(seq+'\n')
for i in range(nCandidate):
    n += 1
    DB = ''
    Eng = lines[n-1].split()[3]
    for j in range(nRes):
        resi, resj = lines[n].split()[0:5:4]
        resi = int(resi)
        resj = int(resj)
        # if this one is paired, resj>0
        if resj:
            if resi<resj:
                DB += '('
            else:
                DB += ')'
        # not paired
        else:
            DB += '.'
        n += 1
    DB += '  ' + Eng + '\n'
    DotBrk.append(DB)
#------ write -----
for ln in DotBrk:
    fo.write(ln)
#fo.write('\n')
fo.close()
print('written:', fnDB)

