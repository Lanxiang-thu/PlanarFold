#!/usr/bin/env python
import os
import sys
import numpy as np
import argparse
#====== Main ====================================================================================================
parser = argparse.ArgumentParser(description='='*80+"\n  *** reRank_decoys ***\n\n\tRerank the conformers according to their potential energy \n\tusing the .dots file generated by 'extract_DBs_from_MDout'\t\n"+'='*80, formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('--dots', default='run.dots', type=str, help='DBN file with secondary structure and potential energy; default = ''run.dots''\n\n', metavar='')
parser.add_argument('--rerank', default='run_Ranked.dots', type=str, help='Output DBN file reranked by potential energy; default = ''run_Ranked.dots''\n\n', metavar='')
args = parser.parse_args()
#-----------------------------------------------------------------------------------------------------------------
fnDots = args.dots
fnRerank = args.rerank
#-----------------------------------------------------------------------------------------------------------------
lines = open(fnDots).readlines()
nRes = lines[0].split()[0]
nCand = len(lines) - 1
# load the data
dots = []
f1s = []
engs = []
for i in range(nCand):
    dot,f1,eng = lines[i+1].split()
    dots.append(dot)
    f1s.append(f1)
    engs.append(eng)
print('nCand:', nCand)
engs = np.array(list(map(float,engs)))
# re-rank from low-E to high-E
order = engs.argsort()
# re-write the dots file
fo = open(fnRerank, 'w')
fo.write(lines[0])
for i in range(nCand):
    idx = order[i]
    fo.write(dots[idx] + '   ' + f1s[idx] + '   ' + '%.4f'%engs[idx] + '\n')
fo.close()
print('written:', fnRerank)



