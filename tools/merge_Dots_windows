#!/usr/bin/env python
import os
import sys
import argparse

#==============================================================================================================
# this code only applies to non-psuedoknot sequence!!
#==============================================================================================================
parser = argparse.ArgumentParser(description='='*80+"\n  *** ct2dot_RNAstructure ***\n\n\t Convert the ct file generated by RNAstructure into 'dots' file\n"+'='*80, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-n', default=2, type=int, help='The number of dots files, default = 2\n\n', metavar='')
parser.add_argument('--dots', type=str, help='The dots files to be merged, use "," to separate several files\n\n', metavar='')
parser.add_argument('--merge', type=str, help='The output file, suffix "_merge.dots" is suggested\n\n', metavar='')
args = parser.parse_args()
#==============================================================================================================
nFile = args.n
fnDot_merge = args.merge
if fnDot_merge == None:
    print("Error: merged file must be specified")
    sys.exit(1)

files = args.dots.replace(' ', '').split(',')
if len(files) != nFile:
    print("Error: the specified file number ({0}) is different from dots files: {1}", nFile, files)
    sys.exit(1)

fnDots = []
for i in range(nFile):
    fnDots.append(files[i])

#======================================================================================
print('fnDots:', fnDots)
RNAs = []
#------------------------------------------
# load the 2D ensembles
all_dbs = []
fo = open(fnDot_merge, "w")
nRes = len(open(fnDots[0]).readlines()[1])-1
print('nRes:', nRes)
for i in range(nFile):
    fnDot = fnDots[i]
    print('fnDot:', fnDot, end='\t')
    lines = open(fnDot).readlines()
    fo.write(fnDot + '\n')
    fo.write(lines[0])
    nCand = int(lines[0].split()[2])
    print('nCand:', nCand)
    dbs = []
    for j in range(nCand):
        dbs.append(lines[2+j][:-1])
    #print(dbs)
    #sys.exit(1)
    all_dbs.append(dbs)
fo.write(lines[1])
# remove the redundant 2D structures
dbs_final = all_dbs[0]
labels = ['1']*len(dbs_final)
for i in range(1, nFile):
    for j in range(len(all_dbs[i])):
        db_1 = all_dbs[i][j]
        isUnique = 1
        idx = -1
        for m in range(len(dbs_final)):
            if db_1 == dbs_final[m]:
                isUnique = 0
                idx = m
                break
        if isUnique:
            dbs_final.append(db_1)
            labels.append(str(i+1))
        else:
            labels[idx] += str(i+1)
# write
nCand_merge = len(dbs_final)
fo.write('nCand_merge : ' + str(nCand_merge) + '\n')
for i in range(nCand_merge):
    fo.write(dbs_final[i] + '  ' + labels[i] + '\n')
fo.close()
print(fnDot_merge, end='  ')
print('\n nCand_merge:', nCand_merge)

        
